tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application behind
  an haproxy instance on an openstack cloud environment.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - types/nodecellar.yaml
  - types/openstack-types.yaml
  - types/haproxy/haproxy.yaml
  - types/scale/scale.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  keystone_username:
    description: >
      Username to use when authenticating to KeyStone.
    default: ''
    type: string

  keystone_password:
    description: >
      Password to use when authenticating to KeyStone.
    default: ''
    type: string

  keystone_tenant_name:
    description: >
      Name of tenant to create resources on.
    default: ''
    type: string

  keystone_url:
    description: >
      URL of OpenStack's KeyStone API endpoint.
    default: ''
    type: string

  region:
    description: >
      Region to create resources in.
    default: ''
    type: string

  image_id:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.

  flavor_id:
    description: >
      An Openstack Flavor ID.

  agent_user:
    description: The user name of the agent on the instance created from the image_id.
    default: ubuntu

  agents_security_group:
    description: >
      The security group to attach to new VM's, to ensure that those VM's can connect
      to the manager.
    type: string

  network_name:
    description: >
      Openstack network name the new server will be connected to

  floating_network_name:
    description: >
      The name of the network to use for allocating a floating ip

  key_pair_name:
    description: >
      Openstack key pair name of the key to associate with the new server

  private_key_path:
    description: |
      Path to the private key which will be used for connecting to the server
      on the manager or machine running CLI if running in local mode.

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

      ################################
      # Setting the haproxy connection
      ################################

      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  ########################################
  # Note: only ubuntu haproxy installation
  # is supported.
  ########################################

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  mongod_host:
    type: nodecellar.nodes.MonitoredServer

    properties:
      management_network_name: { get_input: network_name }
      openstack_config: *openstack_configuration

    interfaces:
      cloudify.interfaces.lifecycle:
        # Needed to workaround OPENSTACK-38
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [agents_security_group, external_name ]}]

    relationships:

      ###########################################################
      # Set the keypair for the VM
      ###########################################################

      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      ###########################################################
      # Attaching the mongo security group to the mongo host
      ###########################################################

      - target: mongod_security_group
        type: cloudify.openstack.server_connected_to_security_group

      ###########################################################
      # Attaching the agents security group to the mongo host
      ###########################################################

      - target: agents_security_group
        type: cloudify.openstack.server_connected_to_security_group

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer

    ###########################################################
    # Setting the nodejs_host initial number of instances to 2.
    # The default values for instances.deploy is 1.
    ###########################################################

    capabilities:
      scalable:
        properties:
          default_instances: 2

    properties:
      openstack_config: *openstack_configuration
      management_network_name: { get_input: network_name }

    interfaces:
      cloudify.interfaces.lifecycle:
        # Needed to workaround OPENSTACK-38
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [agents_security_group, external_name ]}]

    relationships:

      ###########################################################
      # Set the keypair for the VM
      ###########################################################

      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      ###########################################################
      # Attaching the nodecellar security group to
      # the nodecellar host
      ###########################################################

      - target: nodecellar_security_group
        type: cloudify.openstack.server_connected_to_security_group

      ###########################################################
      # Attaching the agents security group to the nodecellar
      # host
      ###########################################################

      - target: agents_security_group
        type: cloudify.openstack.server_connected_to_security_group

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer

    properties:
      management_network_name: { get_input: network_name }
      openstack_config: *openstack_configuration

    interfaces:
      cloudify.interfaces.lifecycle:
        # Needed to workaround OPENSTACK-38
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [agents_security_group, external_name ]}]

    relationships:

      ###########################################################
      # Set the keypair for the VM
      ###########################################################

      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      ###########################################################
      # Attaching an ip to the haproxy frontend host
      ###########################################################

      - type: cloudify.openstack.server_connected_to_floating_ip
        target: nodecellar_ip

      ###########################################################
      # Attaching the haproxy frontend security group to
      # the haproxy frontend host
      ###########################################################

      - type: cloudify.openstack.server_connected_to_security_group
        target: haproxy_frontend_security_group

      ###########################################################
      # Attaching the agents security group to the haxproxy
      # frontend host
      ###########################################################

      - target: agents_security_group
        type: cloudify.openstack.server_connected_to_security_group

  ###########################################################
  # A security group that we attach to new VM's, to ensure
  # that the manager and the agents can communicate.
  ###########################################################

  agents_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: agents_security_group }

  ###########################################################
  # A security group to enable access to the mongo host
  # using the port of the mongo node.
  #
  # We need this so that the nodecellar application can
  # comminicate with MongoDB, since they are running on
  # different hosts.
  ###########################################################

  mongod_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      security_group:
        name: mongod_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ mongod, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 28017
        - remote_ip_prefix: 0.0.0.0/0
          port: 22

  ###########################################################
  # A security group to enable access to the nodejs host
  # using the port of the nodecellar application.
  #
  # This security group will be attached to the nodejs_host
  ###########################################################

  nodecellar_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      security_group:
        name: nodecellar_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ nodecellar, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 22

  ###########################################################
  # A security group to enable access to the haproxy frontend
  # host using the haproxy frontend_port property.
  # In addition, we open the statistics port (9000) of haproxy
  #
  # This security group will be attached to the
  # haproxy_frontend_host
  ###########################################################

  haproxy_frontend_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      security_group:
        name: haproxy_frontend_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ haproxy, frontend_port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ haproxy, statistics_port ]}
        - remote_ip_prefix: 0.0.0.0/0
          port: 22

  ###########################################################
  # An ip to be attached to the haproxy frontend host, since
  # eventually we want to be able to access it
  # from any machine, on any network.
  ###########################################################

  nodecellar_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_configuration
      floatingip:
        floating_network_name: { get_input: floating_network_name }

  ###########################################################
  # Key pair for connecting to the VMs using SSH.
  # The key pair should exist in the OpenStack environment.
  ###########################################################

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: key_pair_name }
      private_key_path: { get_input: private_key_path }

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_ip, floating_ip_address ] }
      port: { get_property: [haproxy, frontend_port] }

groups:

  scale_up_group:
    members: [nodejs_host]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 6
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                node_id: nodecellar
                scale_compute: true

  scale_down_group:
    members: [nodejs_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                node_id: nodecellar
                scale_compute: true

  heal_group:
    members: [nodejs_host]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*nodejs_host.*.cpu.total.system
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }
